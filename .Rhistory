joineddataset %>% filter(math!=100)
joineddataset %>% filter(math>=100000)
joineddataset %>% filter(math>=500000)
joineddataset %>% filter(math>=5000000)
df
df %>% rbind(c('black',5))
df = df %>% rbind(c('black',5))
str(df)
df %>% duplicated()
df %>% duplicated(C(FALSE))
df %>% duplicated)
df %>% distinct()
df %>% distinct() %>% group_by(color)
df %>% distinct() %>% group_by(color) %>% summarise(total=sum(value))
df %>% distinct() %>% group_by(color) %>% summarise(total=sum(as.numeric(value)))
dr[5,]
df[5,]
install.packages("Addins")
install.packages("addinslist")
addinslist:::addinslistAddin()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
data(mpg)
library("ggplot2", lib.loc="~/R/win-library/3.4")
data(mpg)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
addinslist:::addinslistAddin()
addinslist:::addinslistAddin()
g <- ggplot(data = diamonds, aes(x = depth))
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(mpv[, Market]
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(mpv$Market)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(mpv[, BuildingClass]
unique(mpv[, BuildingClass]
head(mpv)
unique(mpv[, BuildingClass])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(data.table)
unique(mpv[, Market])
head(mpv)
table(mpv$InterestAppraised)
table(mpv$PropertyType)
table(mpv$OccupancyType)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
summary(mpv$NOIPerSFCalc)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
mpv %>% !is.na(CapitalizationRatePercentage)
mpv !is.na(CapitalizationRatePercentage)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(mpv[,EffectiveDate_Year])
c("2014","2015","2016","2017")
c(2014,2015,2016,2017)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
mpv %>%
filter(PropertyType == 'Retail' & EffectiveDate_Year == '2017' &
Market == 'Charlotte, NC' & !is.na(CapitalizationRatePercentage))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(mpv[,EffectiveDate_Year])
order(unique(mpv[,EffectiveDate_Year]))
order(desc(unique(mpv[,EffectiveDate_Year])))
unique(mpv[,EffectiveDate_Year])
arrange(desc(unique(mpv[,EffectiveDate_Year])))
sort(unique(mpv[,EffectiveDate_Year]),descreasing = TRUE)
as.numeric(unique(mpv[,EffectiveDate_Year]))
sort(as.numeric(unique(mpv[,EffectiveDate_Year])),decreasing = TRUE)
sort(as.numeric(unique(mpv[,EffectiveDate_Year])),decreasing = FALSE)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
mpv %>%
filter(PropertyType == 'Retail' & EffectiveDate_Year == '2017' &
Market == 'Charlotte, NC' & !is.na(CapitalizationRatePercentage))
mpv %>%
filter(PropertyType == 'Retail' & EffectiveDate_Year == '2017' &
Market == 'Charlotte, NC' & !is.na(CapitalizationRatePercentage)) %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
hi = mpv %>%
filter(PropertyType == 'Retail' & EffectiveDate_Year == '2017' &
Market == 'Charlotte, NC' & !is.na(CapitalizationRatePercentage)) %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
hi
hi[order(hi$Median_CapRate),]
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
library(plotly)
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/Anova')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/Anova')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
quantile(CapitalizationRatePercentage,.25)
quantile(CapitalizationRatePercentage,.25,na.rm =TRUE)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(new.mpv$BuildingClass)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>%
filter(PropertyType == 'Retail' & 'MarketOrientation == 'Suburban &
Market == 'Charlotte, NC' & EffectiveDate_Year == '2017' & BuildingClass == 'A') %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
new.mpv %>%
filter(PropertyType == 'Retail' & 'MarketOrientation == 'Suburban &
Market == 'Charlotte, NC' & EffectiveDate_Year == '2017' & BuildingClass == 'A') %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
new.mpv %>%
filter(PropertyType == input$PropertyType & MarketOrientation == input$MarketOrientation &
Market == input$Market & EffectiveDate_Year == input$Year & BuildingClass == input$BuildingClass) %>% group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
new.mpv %>%
filter(PropertyType == input$PropertyType & MarketOrientation == input$MarketOrientation &
Market == input$Market & EffectiveDate_Year == input$Year & BuildingClass == input$BuildingClass) %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
head(new.mpv)
new.mpv %>%
filter(PropertyType == 'Retail' & 'MarketOrientation == 'Suburban' &
Market == 'Charlotte, NC' & EffectiveDate_Year == '2017' & BuildingClass == 'A') %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
new.mpv %>%
filter(PropertyType == 'Retail' & 'MarketOrientation == 'Suburban' &
Market == 'Charlotte, NC' & EffectiveDate_Year == '2017' & BuildingClass == 'A') %>%
group_by(.,Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>%
filter(PropertyType == 'Retail' & 'MarketOrientation == 'Suburban' &
Market == 'Charlotte, NC' & EffectiveDate_Year == '2017' & BuildingClass == 'A') %>% group_b(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
new.mpv %>%
filter(PropertyType == 'Retail' & Market == 'Charlotte, NC' & EffectiveDate_Year == '2017'
& BuildingClass == 'A') %>% group_by(Submarket) %>% summarise(Count = n())
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>% filter(PropertyType == 'Retail') %>% group_by(Submarket) %>% summarise(Count = n())
library(dplyr)
new.mpv %>% filter(PropertyType == 'Retail') %>% group_by(Submarket) %>% summarise(Count = n())
library(devtools)
new.mpv %>% filter(PropertyType == 'Retail') %>% group_by(Submarket) %>% summarise(Count = n())
install.packages("rstudioapi")
install.packages("rstudioapi")
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>% filter(PropertyType == 'Retail') %>% group_by(Submarket) %>% summarise(Count = n())
new.mpv %>% filter(PropertyType == 'Retail') %>% group_by(Submarket) %>% summarise(Count = n())
new.mpv %>% filter(.,PropertyType == 'Retail') %>% group_by(.,Submarket) %>% summarise(Count = n())
library(dplyr)
new.mpv %>% filter(.,PropertyType == 'Retail')
new.mpv %>% filter(.,PropertyType == 'Retail') %>% %>% summarise(Count = n())
new.mpv %>% filter(.,PropertyType == 'Retail') %>% summarise(Count = n())
detach("package:plotly", unload=TRUE)
new.mpv %>% filter(.,PropertyType == 'Retail') %>% select(CapitalizationRatePercentage,Submarket) %>% group_by(Submarket) %>% summarise(total=n())
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/Cap Rate Discovery')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/Cap Rate Discovery')
new.mpv %>%
filter(PropertyType == 'Multifamily'
new.mpv %>%
filter(PropertyType == 'Multifamily' & Market == 'Charlotte, NC') %>% group_by(Submarket) %>% summarise(n())
install.packages(c("DT", "hms", "htmlwidgets", "Rcpp", "sp", "xml2"))
library(dplyr)
library(ggplot2)
data(mpg)
str(mpg)
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
tbl_df(mpg) %>% group_by(cyl) %>% summarise(meanCty = mean(cty))
install.packages("xml2")
tbl_df(mpg) %>% group_by(cyl) %>% summarise(meanCty = mean(cty))
install.packages("installr")
library(installr)
installr()
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
library(dplyr)
library(ggplot2)
data(mpg)
str(mpg)
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
library(dplyr)
library(ggplot2)
data(mpg)
str(mpg)
# 1.3
tbl_df(mpg) %>%
group_by(cyl) %>%
summarise(meanCty = mean(cty),
meanHwy = mean(hwy))
tbl_df(mpg) %>%  summarise(meanCty = mean(cty))
tbl_df(mpg) %>% group_by(cyl) %>% summarise(meanCty = mean(cty))
head(tbl_df)
head(mpg)
install.packages("utf8")
mpg_tbl = tbl_df(mpg) %>%
select( V1 = year,
V2 = cyl,
V3 = cty,
V4 = hwy)
tbl_df(mpg) %>%
group_by(manufacturer) %>%
top_n(1,cty)
new.mpv %>%
filter(PropertyType == 'Retail') %>%
group_by(Submarket) %>%
summarise(Count = n(),
Avg_CapRate = mean(CapitalizationRatePercentage,na.rm =TRUE),
Median_CapRate = median(CapitalizationRatePercentage,na.rm =TRUE),
IQR_CapRate = IQR(CapitalizationRatePercentage,na.rm = TRUE),
Min_CapRate = min(CapitalizationRatePercentage,na.rm =TRUE),
Max_CapRate = max(CapitalizationRatePercentage,na.rm =TRUE))
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
5*4.222
round(5*4.222,2)
round(5*4.22222222,2)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
# Question 1
library(ggplot2)
data(cars)
plot(cars$speed,cars$dist)
ggplot(data = cars , aes(x = speed, y=dist))+
geom_point(col="red",pch = 17)+
xlab("Speed (mpg)")+
ylab("Stopping Distance (ft)")+
ggtitle("Relationship between Speed and Stopping Distance ")
ggplot(data = cars , aes(x = speed, y=dist))+
geom_point(col="red",pch = 17)+
xlab("Speed (mpg)")+
ylab("Stopping Distance (ft)")+
ggtitle("Relationship between Speed and Stopping Distance ")
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>%
filter(EffectiveDate_Year == '2017')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>% group_by(EffectiveDate_Year) %>% summarise(.,n())
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
knitr::opts_chunk$set(echo = TRUE)
##cache = TRUE; is used to keep the data, not regenerate the data once re-run###
raw.df <- fread("./data.csv", stringsAsFactors = F)
raw.df <- as.data.frame(raw.df)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
colnames(raw.df) <-tolower(colnames(raw.df))
names(raw.df)[8] <- "cuisine"
names(raw.df)[9] <- "inspection.date"
names(raw.df)[11] <- "violation.code"
names(raw.df)[12] <- "violation.description"
names(raw.df)[13] <- "critical.flag"
names(raw.df)[16] <- "grade.date"
names(raw.df)[17] <- "record.date"
names(raw.df)[18] <- "inspection.type"
# 2. Convert the inspection.date column from character to date format.
raw.df$inspection.date <- as.Date(raw.df$inspection.date,"%m/%d/%y")
#type(raw.df$inspection.type)
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
temp_raw = raw.df %>% select(.,inspection.date) %>% mutate(.,inspection.month = format(raw.df$inspection.date,"%m"))
raw.df = (cbind(raw.df,inspection.month=temp_raw$inspection.month))
# 4. Impute the missing values for the 'grade' column
raw.df$grade = ifelse(raw.df$grade == "A","A",ifelse(raw.df$grade == "B","B",ifelse(raw.df$grade == "C","C",ifelse(raw.df$score >= 0 & raw.df$score <14,"A",ifelse(raw.df$score >= 14 & raw.df$score <28,"B",ifelse(raw.df$score >= 28,"C","Other"))))))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
unique(raw.df$action)
raw.df$action.new = ifelse(raw.df$action == "Violations were cited in the following area(s).","violations",ifelse(raw.df$action == "","Missing",ifelse(raw.df$action == "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.","closed",ifelse(raw.df$action == "No violations were recorded at the time of this inspection.","no violations",ifelse(raw.df$action == "Establishment re-opened by DOHMH","reopened",ifelse(raw.df$action == "Establishment re-closed by DOHMH","reclosed","Missing"))))))
head(raw.df)
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.df = raw.df %>% filter(.,raw.df$boro != "Missing")
raw.df = raw.df %>% filter(.,raw.df$score >=0 & raw.df$score != "")
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
temp_raw_df = raw.df %>% select(.,camis,boro,cuisine,inspection.date,action=action.new,score,grade,month=inspection.month)
# 8. Unique inspections
inspections = unique(temp_raw_df$action)
ggplot(temp_raw_df,aes(boro)) + geom_bar(aes(fill = grade)) + coord_flip()
#There are many more restaurants in Manhatten compared to the other four boroughs. We will need to find a % distribution in order to confirm that staten island has a higher percent of restuarants with a 'C' grade than compared to other boroughs.
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv[Submarket]
new.mpv[,Submarket]
head(new.mpv(,Submarket))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv %>% select(Submarket,CapitalizationRatePercentage)
x = new.mpv %>% select(Submarket,CapitalizationRatePercentage)
plot_ly(data=x)%>%
add_trace(x=Submarket,y=CapitalizationRatePercentage, type = 'box')
plot_ly(data=x,add_trace(x=Submarket,y=CapitalizationRatePercentage, type = 'box'))
plot_ly(data=x) %>% add_trace(x=Submarket,y=CapitalizationRatePercentage, type = 'box')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
new.mpv[1,2,3,4,10]
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
mpv = fread("mpv.csv", stringsAsFactors = F)
new.mpv <- mpv %>% filter(.,
PropertyType %in% c("Industrial","Retail","Office","Hotel","Self Storage","Senior Housing","Multifamily")
#Eliminates Land & Other Specialty Property Types
#BuildingClass != "" & #Only records with a valid Building Class
#InterestAppraised == "Fee Simple"
#Market != "" #Eliminates records not tagged to a market
)
names(new.mpv)
names(mpv)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
names(new.mpv)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
unique(new.mpv$SubType)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
names(new.mpv)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/leaflet')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDashBoard')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDashBoard')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
head(new.mpv)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
ggplot(data = new.mpv) +
geom_jitter(mapping = aes(x = AverageMarketRent, color = Market))
ggplot(data = new.mpv) +
geom_jitter(mapping = aes(y = AverageMarketRent, color = Market))
ggplot(data = new.mpv) +
geom_jitter(mapping = aes(y = AverageMarketRent, x = Market))
ggplot(data = new.mpv) +
geom_jitter(mapping = aes(y = AverageMarketRent, x = Market,color=Market))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
min(new.mpv[,"AverageMarketRent"])
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/shinyDemo2')
setwd("~/R/Code/IRR Data Science Build/Shiny Apps/RShiny_ValuationMetrics")
setwd("~/R/Code/IRR Data Science Build/Shiny Apps/RShiny_ValuationMetrics")
shiny::runApp()
shiny::runApp()
runApp()
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::deployApp('C:/Users/raj-t/Documents/R/Code/IRR Data Science Build/Shiny Apps/Valuation Metrics')
library.packages("pitchRx")
install.packages("pitchRx")
pitchRx::players
pitchRx::fields
pitchRx??
pitchRx?
?pitchRx
